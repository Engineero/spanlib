<?xml version="1.0"?>
<!DOCTYPE article PUBLIC "-//KDE//DTD DocBook XML V4.2-Based Variant V1.1//EN" "/usr/share/sgml/docbook/xml-dtd-4.2-1.0-17.2/docbookx.dtd">

<article id="index" xmlns:xi="http://www.w3.org/2001/XInclude">

	<artheader>
		<title>SpanLib - Spectral Analysis Library</title>
		<titleabbrev>SpanLib</titleabbrev>
		<authorgroup>
			<author>
				<firstname>Stephane</firstname>
				<surname>Raynaud</surname>
			</author>
			<author><firstname>Charles</firstname> <surname>Doutriaux</surname></author>
			<affiliation>
				<address>Contact: <email>stephane.raynaud at gmail.com</email>
				</address>
			</affiliation>
		</authorgroup>
		<keywordset>
			<keyword>statistics</keyword>
			<keyword>physics</keyword>
			<keyword>climate variability</keyword>
			<keyword>financial variability</keyword>
			<keyword>FFT</keyword>
			<keyword>eigen problem</keyword>
			<keyword>spatio-temporal</keyword>
			<keyword>MSSA</keyword>
			<keyword>PCA</keyword>
			<keyword>EOF</keyword>
			<keyword>POP</keyword>
		</keywordset>
		<productname>SpanLib</productname>
		<releaseinfo>
			<para>Version 1.0</para>
			<para>
				Project hosted by:
				<ulink url="http://sourceforge.net">
					<graphic srcedit="SourceForge"  fileref="http://sflogo.sourceforge.net/sflogo.php?group_id=168272&amp;type=1" width="88" />
				</ulink>
			</para>
		</releaseinfo>
	</artheader>
	<articleinfo>
		<pubdate role="now"/>
	</articleinfo>

	<!--#################################################################-->
	<!--#################################################################-->
	<sect1 id="doc_pre">
		<title>Presentation</title>

		<!--#################################################################-->
		<sect2 id="doc_pre_int">
			<title>Introduction</title>
			<para>
				Observed or simulated multi-channel timeseries generally include
				a sum of different signals that can be hardly distinguished one another,
				even if their respective origin is fundamentally different.
				Analysis methods that are able to extract the most coherent modes
				of variability generally helps to identify signals of interests.
			</para>
			<para>
				SpanLib currently focuses on the use of linear analysis methods
				that rely on eign solutions of covariance or correlations matrices
			</para>
			<para>
				This package provides a <link linkend="doc_f90">F90 library</link> (as a module)
				containing a minimal collection of subroutines to perform
				<emphasis role="bold">Principal Componant Analysis</emphasis> (PCA),
				<emphasis role="bold">Multi-channel Singular Spectrum Analysis</emphasis> (MSSA), reconstruction
				of components and phase composites.
				The package also provide a <link linkend="doc_pyt">python module</link>
				that calls the F90 library and gives the user a set of useful functions
				to perform analyses.
			</para>
			<para>
				In its future version, SpanLib will also include others methods, such
				Singular Value Decomposition or Principal Oscillation Pattern analysis.
			</para>
		</sect2>

		<!--#################################################################-->
		<sect2 id="doc_pre_fun">
			<title>Fundamentals</title>
			<para>
				<emphasis role="bold"><link linkend="pca">PCA</link></emphasis> is also know as Empirical Orthogonal Functions (EOFs) decomposition:
				it decomposes a space-time signal in pairs of
				spatial EOFs and temporal
				Principal Components (PCs)
				that are the eigen solutions of the covariance (or correlation) matrix of the initial signal.
				The first EOFs represent the dominant, pure spatial patterns of variability,
				and their associated PCs are the coefficients that regulate these patterns.
				<note>
					In this document, "space" refers to the more general notion
					of "channel",  in opposition to "time".
					In climate studies, the channel dimension generally coincides with space.
				</note>
			</para>
			<para>
				<emphasis role="bold"><link linkend="ssa">SSA</link></emphasis> (Singular Spectrum Analysis)
				is mathematically very similar to PCA:
				there is now only one channel as an input dataset, and eigenmodes are computed on
				the lag-covariance matrix (instead of on the cross -between channels- covriance matrix).
				The EOFs have only a temporal dimension.
				Therefore, SSA is intended to provides information on purely temporal signal, like
				a classical Fourier decomposition.
				However, SSA has many advantages on the latter method:
				<itemizedlist>
					<listitem>
						It removes <emphasis>incoherent noise</emphasis> (white noise):
						the noisy part of the signal takes the form of low order
						modes, identified as a "background" that can be easily neglected.
					</listitem>
					<listitem>
						It naturally extracts <emphasis>regular oscillations</emphasis> (with a narrow spectral peak).
						These oscillations are identified as pair of modes whose PCs and EOFs
						are in phase quadrature, that can be <emphasis>intermittent</emphasis>.
					</listitem>
					<listitem>
						Coherent nonlinear trends are identified as the lower frequency modes.
					</listitem>
					<listitem>
						Compared to others, this method is efficient on short signal.
					</listitem>
				</itemizedlist>
				The maximal lag (the only parameter of SSA) is known as the
				<link linkend="window">window</link>.
			</para>
			<para>
				<emphasis role="bold"><link linkend="mssa">MSSA</link></emphasis>
				is a combination of PCA and SSA: it is an SSA on several channels.
				The diagonalized is built on covariances between channels (cross) and time segments (lag).
				Therefore, it has the advantage of PCA for extracting the dominant "spatial" patterns
				of the variability, and has also the spectral filtering capabilities of SSA.
				All identified modes have spatio-temporal properties.
				For example, oscillations are not constrained on a fixed spatial pattern, but can also
				have a <emphasis>propagative signature</emphasis> over their cycle.
				<emphasis>This advanced spatial and spectral filtering is helpful to identify
				the most coherent (and more espacially oscillatory) spatio-temporal modes in a short
				noisy signal.</emphasis>
			</para>
			<para>
				All these analysis methods act as a linear filter.
				For each of them, it is possible to reconstruct part of the filtered signal.
				A reconstructed mode is the "multiplication" of its EOF by its PC, and
				it has the same dimension of the initial dataset.
				Such operation is necessary to go back from the EOF space to the physical space.
			</para>
			<para id="pg:dof">
				Finally, PCA may be used also to simply reduce the number of degree-of-freedom (d-o-f) of a dataset.
				For example, you can keep the first PC that explain a 80% of the variance.
				These PCs are then used as an input dataset for other analysis.
				This methodology is useful for MSSA since the eigen problem solving
				may be very time consuming: we are now able, for example, to potentially reduce the
				number of channels from several hundred or thounsand, to less than 20.
			</para>
		</sect2>

		<!--#################################################################-->
		<sect2 id="doc_pre_tec">
			<title>Some technical details...</title>

			<sect3 id="doc_pre_tec_pca">
				<title>...about PCA</title>

				<simplesect>
					<title>CPU: space versus time</title>
					<para>
						PCA decomposition is performed on spatio-temporal datasets.
						If the number of channels becomes important, PCA can use a lot of CPU since
						the size of the diagonalised matrix if to the square of this number.
						It is possible to partly avoid this problem when the time dimension is lower
						than the spatial dimension, using a correlation matrix
						in time instead of in space.
						F90 subroutine <varname><link linkend="sl_pca">sl_pca</link></varname> of SpanLib
						provides the ability
						to choose which of theses approaches to use for PCA.
					</para>
				</simplesect>

				<simplesect>
					<title>Weights</title>
					<para>
						In some case, not all channels have the same weight.
						For instance, for gridded dataset, weight must be proportional
						to the grid cell area.
						Whereas common PCA analysis does not take these weights into account
						it is possible to give optional weights to
						<varname><link linkend="sl_pca">sl_pca</link></varname>.
						Using the <link linkend="doc_pyt">python module</link>,
						it is easy to "attach" weights to a variable for use by
						<varname><link linkend="&lt;SpAn_object&gt;.pca">pca</link></varname>.
					</para>
				</simplesect>

				<simplesect>
					<title>Mask</title>
					<para>
						Similarly, it is not useful to analyse masked points
						(for example, gridded points situated on land when use analyse oceanic data).
						The F90 subroutine <varname><link linkend="sl_pca">sl_pca</link></varname>
						makes the supposition that none of the masked (all channels are analysed).
						However, as well as for the weights, it is possible to associate
						an spatial mask to a dataset in order to remove masked points when
						using the python module.
						Then, <varname><link linkend="spanlib.pack">spanlib.pack</link></varname>
						can be used to "pack" (compress) data before they are analysed.
					</para>
				</simplesect>

				<simplesect>
					<title>Analysing several variables at the same time</title>
					<para>
						One can be interested in analysing several variables ate the same time.
						These variables may come from different regions, datasets and may be
						even of completely different nature.
						The essential problem of units may be solved using simple
						normalisations.
						Python function <varname><link linkend="spanlib.stackData">spanlib.stackData</link></varname>
						can be used to "pack" (compress) data before they are analysed.
						Then, using <varname><link linkend="spanlib.unStackData">spanlib.unStackData</link></varname>
						you can unpack results from you analysis.
						<xref linkend="raynal06"/> presents an example of use where variables
						such as sea surface temperature, wind stress modulus and air-sea CO2
						fluxes are analysed at the same time:
						the simultaneous variability of the variables is filtered and
						the dominant oscillations are extracted for each of these variables.
					</para>
				</simplesect>

				<simplesect>
					<title>Reconstructions</title>
					<para>
						Reconstructions (F90:<varname><link linkend="sl_pcarec">sl_pcarec</link></varname>,
						Python:<varname><link linkend="&lt;SpAn_object&gt;.reconstruct">&lt;SpAn_object&gt;.reconstruct</link></varname>)
						may not be necessary the multiplication of an EOF by its associated PC.
						When PCA is used for a reduction of d-o-f (see <xref linkend="pg:dof"/>),
						orginal PCs are first filtered and then converted back to the original space
						using saved EOFs.
					</para>
				</simplesect>
			</sect3>

			<sect3 id="doc_pre_tec_msa">
				<title>...about MSSA</title>
				<simplesect id="window">
					<title>The window parameter</title>
					<para>
						This is the only and essential parameter of SSA and MSSA
						(F90:<varname><link linkend="sl_pcarec">sl_mssa</link></varname>,
						Python:<varname><link linkend="&lt;SpAn_object&gt;.mssa">&lt;SpAn_object&gt;.mssa</link></varname>).
						It defines the maximal value of the lags use when building
						the covariance matrix.
						It acts as a spectral parameter: the spectral resolution
						is higher for periods lower than this period.
						A standard value is one third of the time dimension.
					</para>
				</simplesect>
				<simplesect>
					<title>Phase composites</title>
					<para>
						One of the most important interests of MSSA is to be able to
						extract intermittent space-time oscillations from the signal.
						At the first order, an oscillation is its "typical" cycle.
						<varname><link linkend="sl_phasecomp">sl_phasecomp</link></varname> (F90)
						and
						<varname><link linkend="spanlib.phases">spanlib.phases</link></varname> (Python)
						perfom phases composites: it computes an averaged cycle and cut it an
						homegeneous parts (as one can do for the annual cycle in 12 months).
					</para>
				</simplesect>

			</sect3>
		</sect2>

		<!--#################################################################-->
		<sect2 id="doc_pre_mor">
			<title>For more information</title>
			<para>
				For more information about PCA and MSSA may be found in papers and on the web.
				See for example:
				<itemizedlist>
					<listitem>
						<emphasis role="bold" id="pca">PCA: </emphasis>
						<xref linkend="prei88"/>,
						<xref linkend="wilk95"/>.
					</listitem>
					<listitem>
						<emphasis role="bold" id="ssa">SSA: </emphasis>
						<xref linkend="brki86"/>,
						<xref linkend="vagh89"/>.
					</listitem>
					<listitem>
						<emphasis role="bold" id="mssa">MSSA: </emphasis>
						<xref linkend="plva94"/>,
						<xref linkend="raynal05"/>,
						<xref linkend="raynal06"/>.
					</listitem>
				</itemizedlist>
				You can also browse <xref linkend="doc_lin"/>.
			</para>
		</sect2>

		<!--#################################################################-->
		<sect2 id="doc_int_vie">
			<title>View sources</title>
			<para>
				An html version of the source codes is available here:
				<itemizedlist>
					<listitem>
						<filename><ulink url="src_f90_lib.html">spanlib.f90</ulink></filename>
						for the <link linkend="doc_f90">fortran library</link>,
					</listitem>
					<listitem>
						<filename><ulink url="src_pyt_mod.html">spanlib_python.py</ulink></filename>
						for the <link linkend="doc_pyt">python module</link>.
					</listitem>
				</itemizedlist>
			</para>
		</sect2>
	</sect1>

	<!--#################################################################-->
	<!--#################################################################-->
	<sect1 id="doc_ins">
		<title>Installation</title>

		<sect2 id="doc_ins_req">
			<title>Requirements</title>
			<sect3>
				<title>Fortran library</title>
				<para>You need a F90 compiler to compile it, and <ulink url="http://www.netlib.org/lapack/">BLAS/LAPACK</ulink>  libraries compilated using this F90 compiler to be able to link with library.</para>
				<para>To run the F90 example, you need the F90 netcdf library.</para>
			</sect3>
			<sect3>
				<title>Python module</title>
				<para>You need the fortran library, and the pyfort and Numeric modules from <ulink url="http://www-pcmdi.llnl.gov/software-portal/cdat">CDAT</ulink>.</para>
				<para>To run python example, you needs the <literal>cdms</literal> and <literal>vcs</literal> modules (delivered with <ulink url="http://www-pcmdi.llnl.gov/software-portal/cdat">CDAT</ulink>).</para>
			</sect3>
		</sect2>

		<sect2 id="doc_ins_dow">
			<title>Download</title>
			<para>You can download the sources of the package from the <ulink url="http://sourceforge.net/project/showfiles.php?group_id=168272">Sourceforge repositories</ulink> of the project.</para>
		</sect2>

		<sect2 id="doc_ins_ins">
			<title>Compilation and installation</title>
			<para>Detailed instructions can be found in the INSTALL file of the package.</para>
			<procedure>
				<step>
					<para>
						First, compile it with:
<!---->
<programlisting>
<prompt>&lt;user&gt;</prompt> <userinput>./configure</userinput>
<prompt>&lt;user&gt;</prompt> <userinput>make</userinput>
</programlisting>
					</para>
				</step>
				<step>
					<para>
						Second, install it as root:
<programlisting>
<prompt>&lt;user&gt;</prompt> <userinput>su</userinput>
<prompt>&lt;root&gt;</prompt> <userinput>make install</userinput>
</programlisting>.
<!---->
					</para>
				</step>
			</procedure>
			<para>
				Here is an example of <userinput>./configure</userinput>:
				<programlisting><prompt>&lt;raynaud&gt;</prompt> <userinput>./configure --with-blas-lib=/usr/local/install/lapack-3.0/lib \
--with-netcdf-lib=/usr/local/install/netcdf-3.6.1/lib \
--with-netcdf-inc=/usr/local/install/netcdf-3.6.1/include \
--prefix=$HOME --with-pythondir=$HOME/python FC=ifort</userinput></programlisting>
			</para>
		</sect2>

	</sect1>

	<!--#################################################################-->
	<!--#################################################################-->
	<sect1 id="doc_f90">
		<title>The Fortran 90 library</title>

		<!--#################################################################-->
		<sect2 id="doc_f90_int">
			<title>Introduction</title>
			<para>
				The fortran 90 library provides a list of subroutines to perform PCA, MSSA, recontructions and phase composites.
			</para>
			<note>
				The channel (spatial) dimension is always 1D.
				Therefore, as in the python module, multi-dimensional arrays must be
				packed before being analysed.
				You can use <literal>pack</literal> and <literal>unpack</literal> F90 subroutines
				for this task, and optionally give a mask to remove masked points.
				If you analyse several variables at the same time, concatenate
				normalised packed arrays before the analsysis.
			</note>

		</sect2>

		<!--#################################################################-->
		<xi:include href="doc_f90_sub_inc.xml"/>

		<!--#################################################################-->
		<sect2 id="doc_f90_exa">
			<title>A Fortran 90 example</title>
			<para>
				This is an example of how to use this the Fortran 90 component of Spanlib.
				In this example, an analysis of Sea surface Temperature anomalies using data
				stored in the netcdf format.
				The dominant oscillatory mode of the El Nino variability is then extracted
				and stored in a netcdf file.
			</para>
			<example>
				<title>F90 example</title>
				<para>
					You can run this example typing (from package directory):
					<programlisting><prompt>&lt;user&gt;</prompt> <userinput>cd example &amp;&amp; make</userinput></programlisting>
					This command will first try to download the dataset,
					then compile the following f90 program, run it,
					and finally try to visualise output data.
					See <xref linkend="doc_ins_req"/> if it fails.
				</para>
				<para>
					The sources of this example is highlighted below, with comments inside.
					<xi:include href="src_f90_exa_inc.xml"/>
				</para>
			</example>
		</sect2>

	</sect1>



	<!--#################################################################-->
	<!--#################################################################-->
	<!--#################################################################-->
	<sect1 id="doc_pyt">
		<title>The python module</title>

		<!--#################################################################-->
		<sect2 id="doc_pyt_int">
			<title>Introduction</title>
			<para>
				The intent of the python module is to offer
				a scripting interface to the F90 subroutines.
				It takes advantage of the power of python and
				of the computational efficiency of fortran.
			</para>
			<para>
				Thanks to the use of CDAT, the module easily handle
				gridded dataset, using masks and weights for example.
				It also allows the analysis of several datasets at the
				same time by stacking them.
				The module performs some tasks in a transparant way:
				packing and unpacking of data, PCA reduction before MSSA anaysis, etc.
			</para>
			<note>
				The current version of this module only manage 3D dataset:
				first two dimensions for "space", the last dimension for time.
			</note>
		</sect2>

		<!--#################################################################-->
		<xi:include href="doc_pyt_sub_inc.xml"/>

		<!--#################################################################-->
		<sect2 id="doc_pyt_exa">
			<title>A python example</title>
			<para>
				This example shows how to use some of the available
				components of the python module.
				It uses the same dataset as for <xref linkend="doc_f90_exa"/>.
				However, is this example, two different areas are analysed at
				the same time.
				This is intented to mimics the used of two different datasets
				that are stacked, before being analysed.
				Such approach (see for example <xref linkend="raynal06"/>) allows
				to find modes of variability in a arbitrary number of variables,
				provided you are careful with units (performing appropriate normalisations).
			</para>
			<para>
				If you configurations allows it, you can run this example typing
				this from the installation package directory:
				<programlisting><prompt>&lt;user&gt;</prompt> <userinput>cd example &amp;&amp; make python1</userinput></programlisting>
			</para>
			<example>
				<title>Python example</title>
				<xi:include href="src_pyt_exa_inc.xml"/>
			</example>
		</sect2>
	</sect1>




	<!--#################################################################-->
	<!--#################################################################-->
	<!--#################################################################-->
	<sect1 id="doc_lin">
		<title>Links</title>
		<itemizedlist>
			<listitem>
				Home page of the project:
				<ulink url="http://spanlib.sourceforge.net"/>
			</listitem>
			<listitem>
				Sourceforge page of the project where you can find news, forums,
				where to report bugs, where to request features, files to download, etc:
				<ulink url="http://sourceforge.net/projects/spanlib/"/>
			</listitem>
			<listitem>
				An example of use of MSSA is available
				at <ulink url="http://stefdeperou.free.fr/meteo.php"/> (french).
				This example shows an analysis of air temperatures at Orly airport,
				with different values of parameters.
				It also provides an example of prediction using the analysis results.
			</listitem>
			<listitem id="ssa-mtm">
				The <ulink url="http://www.atmos.ucla.edu/tcd/ssa/">SSA-MTM Toolkit </ulink>
				is graphical interface to PCA, MSSA and other methods.
				It is useful to make comparisons of methods.
				This website provides a lot of exlplanations of how these analysis methods works.
			</listitem>
		</itemizedlist>
	</sect1>




	<!--#################################################################-->
	<!--#################################################################-->
	<!--#################################################################-->
	<bibliography id="doc_bib">

		<!-- PCA -->

		<biblioentry xreflabel="Preisendorfer (1988)" id="prei88">
			<abbrev>1</abbrev>
			<authorgroup>
				<author><firstname>R.</firstname><surname>Preisendorfer</surname></author>
			</authorgroup>
			<citetitle pubwork="article">Principal Component Analysis in Meteorology and Oceanography</citetitle>
			<publisher>
				<publishername>Elsevier Sci.</publishername>
			</publisher>
			<pubdate>1988</pubdate>
		</biblioentry>

		<biblioentry xreflabel="Wilks (1995)" id="wilk95">
			<abbrev>2</abbrev>
			<authorgroup>
				<author><firstname>D.</firstname><surname>Wilks</surname></author>
			</authorgroup>
			<citetitle pubwork="article">Statistical methods in the atmospheric sciences</citetitle>
			<publisher>
				<publishername>Cornell University</publishername>
			</publisher>
			<pubdate>1995</pubdate>
		</biblioentry>


		<!-- SSA -->
		<biblioentry xreflabel="Broomhead
and King (1986)" id="brki86">
			<abbrev>3</abbrev>
			<authorgroup>
				<author><firstname>S.</firstname><othername role="mi">D.</othername><surname>Broomhead</surname></author>
				<author><firstname>G.</firstname><othername role="mi">P.</othername><surname>King</surname></author>
			</authorgroup>
			<citetitle pubwork="article">Extracting qualitative dynamics from experimental data</citetitle>
			<citetitle pubwork="journal">Physica D</citetitle>
			<publisher>
				<publishername>Elsevier Science Publishers B. V.</publishername>
			</publisher>
			<volumenum>20</volumenum>
			<artpagenums>217&#x2013;236</artpagenums>
			<pubdate>1986</pubdate>
		</biblioentry>

		<biblioentry xreflabel="Vautard and Ghil (1989)" id="vagh89">
			<abbrev>4</abbrev>
			<authorgroup>
				<author><firstname>R.</firstname><surname>Vautard</surname></author>
				<author><firstname>M.</firstname><surname>Ghil</surname></author>
			</authorgroup>
			<citetitle pubwork="article">Singular Spectrum Analysis in nonlinear dynamics&#44;with application to paleoclimatic time series</citetitle>
			<citetitle pubwork="journal">Physica D</citetitle>
			<volumenum>35</volumenum>
			<artpagenums>395-424</artpagenums>
			<pubdate>1989</pubdate>
		</biblioentry>

		<!-- MSSA -->
		<biblioentry xreflabel="Plaut and Vautard (1994)" id="plva94">
			<abbrev>5</abbrev>
			<authorgroup>
				<author>
					<firstname>G.</firstname><surname>Plaut</surname>
				</author>
				<author>
					<firstname>R.</firstname><surname>Vautard</surname>
				</author>
			</authorgroup>
			<citetitle pubwork="article"> Spells of low&#45;frequency oscillations and weather regimes in the northern hemisphere</citetitle>
			<citetitle pubwork="journal">J. Atm. Sc.</citetitle>
			<volumenum>51</volumenum>
			<artpagenums>210-236</artpagenums>
			<pubdate>1994</pubdate>
		</biblioentry>

		<biblioentry xreflabel="Raynaud et al (2005)" id="raynal05">
			<abbrev>6</abbrev>
			<authorgroup>
				<author><firstname>S.</firstname><surname>Raynaud</surname></author>
				<author><firstname>P.</firstname><surname>Yiou</surname></author>
				<author><firstname>R.</firstname><surname>Kleeman</surname></author>
				<author><firstname>S.</firstname><surname>Speich</surname></author>
			</authorgroup>
			<citetitle pubwork="article">Using MSSA to determine explicitly the oscillatory dynamics of weakly nonlinear climate systems</citetitle>
			<citetitle pubwork="journal">Nonlin. Proc. Geophys.</citetitle>
			<volumenum>12</volumenum>
			<artpagenums>807&#x2013;815</artpagenums>
			<pubdate>2005</pubdate>
			<releaseinfo><ulink url="http://www.nonlin-processes-geophys.net/12/807/2005/npg-12-807-2005.pdf">Download</ulink></releaseinfo>
		</biblioentry>

		<biblioentry xreflabel="Raynaud et al (2006)" id="raynal06">
			<abbrev>7</abbrev>
			<authorgroup>
				<author><firstname>S.</firstname><surname>Raynaud</surname></author>
				<author><firstname>O.</firstname><surname>Aumont</surname></author>
				<author><firstname>K.</firstname><surname>Rodgers</surname></author>
				<author><firstname>P.</firstname><surname>Yiou</surname></author>
			</authorgroup>
			<citetitle pubwork="article">Interannual to decadal variability of air&#45;sea CO2 fluxes in the North Atlantic</citetitle>
			<citetitle pubwork="journal">Ocean Sci.</citetitle>
			<volumenum>2</volumenum>
			<artpagenums>43-60</artpagenums>
			<pubdate>2006</pubdate>
			<releaseinfo><ulink url="http://www.ocean-sci.net/2/43/2006/os-2-43-2006.pdf">Download</ulink></releaseinfo>
		</biblioentry>

	</bibliography>




</article>